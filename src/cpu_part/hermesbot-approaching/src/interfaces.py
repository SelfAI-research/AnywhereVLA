"""Strategy interfaces enabling plug-and-play components."""
from typing import Iterable, Optional, Protocol, Sequence, Tuple
from geometry_msgs.msg import PoseStamped

class NormalEstimator(Protocol):
    def estimate(self, region_mask, free_mask, obj_idx: Tuple[int,int],
                 ox: float, oy: float, oyaw: float, res: float) -> Optional[Tuple[float,float]]: ...

class EdgeFinder(Protocol):
    def distance_to_edge(self, ox: float, oy: float, nx: float, ny: float,
                         free_mask, mx: float, my: float, myaw: float, res: float, max_search: float) -> float: ...

class CandidateGenerator(Protocol):
    def generate(self, ex: float, ey: float, nx: float, ny: float, base_standoff: float
                 ) -> Iterable[Tuple[float,float,float]]: ...

class ClearanceValidator(Protocol):
    def configure_grid(self, free_mask, cost, res: float, mx: float, my: float, myaw: float,
                       min_clear: float, disallow_inscribed: bool, inscribed_thresh: int) -> None: ...
    def ok(self, x: float, y: float) -> bool: ...

class PlannerInterface(Protocol):
    def feasible(self, goal: PoseStamped, start: Optional[PoseStamped], mode: str) -> bool: ...

class MarkerPublisher(Protocol):
    def publish_edge(self, frame: str, pts_xy: Sequence[Tuple[float,float]]) -> None: ...
    def publish_candidates(self, frame: str, cands: Iterable[Tuple[float,float,float]], limit: int = 60) -> None: ...
    def publish_goal(self, frame: str, x: float, y: float, yaw: float) -> None: ...
